{"version":3,"sources":["../src/index.ts","../src/controllers/llm/routes.ts","../src/utils/rag-utility.ts","../src/controllers/llm/index.ts","../src/controllers/file/routes.ts","../src/controllers/file/index.ts","../src/controllers/routes.ts","../src/utils/error.ts","../src/middlewares/error-handler.ts","../src/env.ts"],"sourcesContent":["import { serve } from \"@hono/node-server\";\nimport { Hono } from \"hono\";\nimport { cors } from \"hono/cors\";\nimport { routes } from \"@/controllers/routes\";\nimport { errorHandlerMiddleware } from \"@/middlewares/error-handler\";\nimport { envConfig } from \"@/env\";\n\nconst app = new Hono();\napp.use(\n  \"/*\",\n  cors({\n    origin: [\"http://localhost:5173\"],\n    allowHeaders: [\"*\"],\n    allowMethods: [\"POST\", \"GET\", \"OPTIONS\"],\n    exposeHeaders: [\"Content-Length\", \"X-Kuma-Revision\", \"Content-Type\"],\n    maxAge: 600,\n    credentials: true,\n  })\n);\n\napp.onError(errorHandlerMiddleware);\n\n/* Routes */\nroutes.forEach((route) => {\n  app.route(\"/\", route);\n});\n\nserve(\n  {\n    fetch: app.fetch,\n    port: envConfig.APP_PORT,\n  },\n  (info) => {\n    console.log(`Server is running on http://localhost:${info.port}`);\n  }\n);\n","import { Hono } from \"hono\";\r\nimport { sendMessageController } from \"./index.js\";\r\n\r\nconst routes = new Hono().post(\"/send-message\", sendMessageController);\r\n\r\nexport default routes;\r\n","import { PDFLoader } from \"@langchain/community/document_loaders/fs/pdf\";\r\nimport { RecursiveCharacterTextSplitter } from \"langchain/text_splitter\";\r\n// import { HuggingFaceTransformersEmbeddings } from \"@langchain/community/embeddings/huggingface_transformers\";\r\n// import { HuggingFaceInferenceEmbeddings } from \"@langchain/community/embeddings/hf\";\r\n// import { MemoryVectorStore } from \"langchain/vectorstores/memory\";\r\nimport { pipeline } from \"@xenova/transformers\";\r\n\r\nexport class RagUtility {\r\n  static embedFile = async (file: File, question: string) => {\r\n    const loader = new PDFLoader(file, { splitPages: true });\r\n    const docs = await loader.load();\r\n    const splitter = new RecursiveCharacterTextSplitter({\r\n      chunkSize: 500,\r\n      chunkOverlap: 100,\r\n    });\r\n    const chunks = await splitter.splitDocuments(docs);\r\n\r\n    const chunkString = chunks.map((chunk) => chunk.pageContent);\r\n\r\n    const embedder = await pipeline(\r\n      \"feature-extraction\",\r\n      \"Xenova/all-MiniLM-L6-v2\"\r\n    );\r\n\r\n    const chunkTensor = await embedder(chunkString, {\r\n      pooling: \"mean\",\r\n      normalize: true,\r\n    });\r\n    const chunkEmbeddings: number[][] = [];\r\n    const data = Array.from(chunkTensor.data);\r\n    const dim = chunkTensor.dims?.[1];\r\n\r\n    if (dim === undefined) {\r\n      throw new Error(\"chunkTensor.dims[1] is undefined.\");\r\n    }\r\n\r\n    for (let i = 0; i < data.length; i += dim) {\r\n      chunkEmbeddings.push(data.slice(i, i + dim));\r\n    }\r\n\r\n    const questionTensor = await embedder([question], {\r\n      pooling: \"mean\",\r\n      normalize: true,\r\n    });\r\n\r\n    const queryEmbedding = Array.from(questionTensor.data);\r\n\r\n    const scoredChunks = chunkString.map((content, i) => ({\r\n      content,\r\n      score: cosineSimilarity(\r\n        queryEmbedding,\r\n        chunkEmbeddings[i] as unknown as number[]\r\n      ),\r\n    }));\r\n\r\n    const topChunks = scoredChunks\r\n      .sort((a, b) => b.score - a.score)\r\n      .slice(0, 3);\r\n\r\n    topChunks.forEach((chunk) => {\r\n      console.log(`Chunk: ${chunk.content}, Score: ${chunk.score}`);\r\n    });\r\n\r\n    return topChunks[0]?.content || \"\";\r\n  };\r\n}\r\n\r\nexport type DataWithEmbeddings = {\r\n  id: string;\r\n  embedding: number[];\r\n};\r\n\r\nfunction cosineSimilarity(a: number[], b: number[]): number {\r\n  const dot = a.reduce((sum, val, i) => sum + val * b[i]!, 0);\r\n  const normA = Math.sqrt(a.reduce((sum, val) => sum + val * val, 0));\r\n  const normB = Math.sqrt(b.reduce((sum, val) => sum + val * val, 0));\r\n  return dot / (normA * normB);\r\n}\r\n","import { RagUtility } from \"@/utils/rag-utility\";\r\nimport { FileUploadUtility } from \"@/utils/file-upload-utility\";\r\nimport type { Context, Next } from \"hono\";\r\nimport { Ollama } from \"ollama\";\r\n\r\nconst ollama = new Ollama({ host: \"http://127.0.0.1:11434\" });\r\n\r\nexport async function sendMessageController(c: Context, next: Next) {\r\n  let ragContent = null;\r\n  const body = await c.req.parseBody();\r\n  const { messages: reqMessages, tools: reqTools, file } = body;\r\n\r\n  const messages = JSON.parse(reqMessages as string) as {\r\n    role: string;\r\n    message: string;\r\n  }[];\r\n  const tools = JSON.parse(reqTools as string);\r\n\r\n  console.log(\"FILE:\", file);\r\n\r\n  if (file) {\r\n    // await FileUploadUtility.upload(file as File);\r\n    const lastMessage =\r\n      messages[(messages.length - 1) as unknown as number]?.message;\r\n    ragContent = await RagUtility.embedFile(\r\n      file as File,\r\n      lastMessage as unknown as string\r\n    );\r\n  }\r\n\r\n  if (ragContent && ragContent !== \"\") {\r\n    messages.push({\r\n      role: \"system\",\r\n      message: `Context: ${ragContent}`,\r\n    });\r\n  }\r\n\r\n  let formattedOllamaTools: any[] = [];\r\n  if (tools && tools.length > 0) {\r\n    formattedOllamaTools = tools.map((tool: any) => {\r\n      return {\r\n        type: \"function\",\r\n        function: {\r\n          name: tool.name,\r\n          description: tool.description,\r\n          parameters: {\r\n            type: \"object\",\r\n            properties: tool.inputSchema.properties,\r\n            required: tool.inputSchema.required,\r\n          },\r\n        },\r\n      };\r\n    });\r\n  }\r\n\r\n  const llmMessages = [\r\n    ...messages.map((msg: any) => ({\r\n      role: msg.role,\r\n      content: msg.message,\r\n    })),\r\n  ];\r\n\r\n  const response = await ollama.chat({\r\n    model: \"qwen3:1.7b\",\r\n    messages: llmMessages,\r\n    keep_alive: 10,\r\n    stream: true,\r\n    tools: formattedOllamaTools,\r\n  });\r\n  // Streaming response\r\n  const stream = new ReadableStream({\r\n    async start(controller) {\r\n      if (typeof (response as any)[Symbol.asyncIterator] === \"function\") {\r\n        for await (const part of response as AsyncIterable<any>) {\r\n          const data = `data: ${JSON.stringify(part.message.content)}\\n\\n`;\r\n          const toolsCalled = `tools_called: ${JSON.stringify(\r\n            part.message.tool_calls\r\n          )}\\n\\n`;\r\n          const doneReason = `done_reason: ${part.done_reason}\\n\\n`;\r\n\r\n          controller.enqueue(new TextEncoder().encode(data));\r\n          controller.enqueue(new TextEncoder().encode(toolsCalled));\r\n          controller.enqueue(new TextEncoder().encode(doneReason));\r\n        }\r\n      } else {\r\n        // Handle the case where response is a single object\r\n        const part = response as any;\r\n        console.log(\"SINGLE PART:\", JSON.stringify(part, null, 4));\r\n        const data = `data: ${JSON.stringify(part.message.content)}\\n\\n`;\r\n        const toolsCalled = `tools_called: ${JSON.stringify(\r\n          part.message.tool_calls\r\n        )}\\n\\n`;\r\n        const doneReason = `done_reason: ${part.done_reason}\\n\\n`;\r\n\r\n        controller.enqueue(new TextEncoder().encode(data));\r\n        controller.enqueue(new TextEncoder().encode(toolsCalled));\r\n        controller.enqueue(new TextEncoder().encode(doneReason));\r\n      }\r\n      controller.close();\r\n    },\r\n  });\r\n\r\n  return new Response(stream, {\r\n    headers: {\r\n      \"Content-Type\": \"text/plain\", // OR 'text/event-stream' for SSE\r\n      \"Transfer-Encoding\": \"chunked\",\r\n      \"Cache-Control\": \"no-cache\",\r\n      Connection: \"keep-alive\",\r\n    },\r\n  });\r\n}\r\n","import { Hono } from \"hono\";\r\nimport { fileUploadController } from \"./index\";\r\n\r\nconst routes = new Hono().post(\"/file-upload\", fileUploadController);\r\n\r\nexport default routes;\r\n","import { Context, Next } from \"hono\";\r\nimport fs from \"fs/promises\";\r\nimport path from \"path\";\r\n\r\nexport async function fileUploadController(c: Context, next: Next) {\r\n  const body = await c.req.parseBody();\r\n  console.log(\"File upload controller called\");\r\n  console.log(body);\r\n\r\n  const file = body.file as File;\r\n  if (!file) {\r\n    return c.json({ error: \"No file uploaded\" }, 400);\r\n  }\r\n\r\n  const arrayBuffer = await file.arrayBuffer();\r\n  const buffer = Buffer.from(arrayBuffer);\r\n\r\n  const uploadDir = path.resolve(process.cwd(), \"src/files\");\r\n  await fs.mkdir(uploadDir, { recursive: true });\r\n\r\n  const filePath = path.join(uploadDir, file.name);\r\n  await fs.writeFile(filePath, buffer);\r\n\r\n  return c.json(\"Uploaded file successfully\", 200);\r\n}\r\n","import llmRoutes from \"@/controllers/llm/routes\";\r\nimport fileRoutes from \"@/controllers/file/routes\";\r\n\r\nexport const routes = [llmRoutes, fileRoutes] as const;\r\n\r\nexport type AppRoutes = (typeof routes)[number];\r\n","import { StatusCodes } from \"http-status-codes\";\r\n\r\nexport class BadRequestError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.name = \"BadRequestError\";\r\n    this.message = message;\r\n  }\r\n}\r\n\r\nexport class UnauthorizedError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.name = \"UnauthorizedError\";\r\n    this.message = message;\r\n  }\r\n}\r\n\r\nexport class ForbiddenError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.name = \"ForbiddenError\";\r\n    this.message = message;\r\n  }\r\n}\r\n\r\nexport class NotFoundError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.name = \"NotFoundError\";\r\n    this.message = message;\r\n  }\r\n}\r\n\r\nexport class ConflictError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.name = \"ConflictError\";\r\n    this.message = message;\r\n  }\r\n}\r\n\r\nexport function makeError<TError extends Error>(error: TError) {\r\n  const defaultError = {\r\n    name: error.name,\r\n    message: error.message,\r\n  };\r\n\r\n  /* Custom Errors */\r\n  if (error.message.includes(\"Malformed JSON\")) {\r\n    return {\r\n      statusCode: StatusCodes.BAD_REQUEST,\r\n      error: { name: \"BadRequestError\", message: error.message },\r\n    };\r\n  }\r\n\r\n  if (error instanceof BadRequestError) {\r\n    return {\r\n      statusCode: StatusCodes.BAD_REQUEST,\r\n      error: defaultError,\r\n    };\r\n  }\r\n\r\n  if (error instanceof UnauthorizedError) {\r\n    return {\r\n      statusCode: StatusCodes.UNAUTHORIZED,\r\n      error: defaultError,\r\n    };\r\n  }\r\n\r\n  if (error instanceof ForbiddenError) {\r\n    return {\r\n      statusCode: StatusCodes.FORBIDDEN,\r\n      error: defaultError,\r\n    };\r\n  }\r\n\r\n  if (error instanceof NotFoundError) {\r\n    return {\r\n      statusCode: StatusCodes.NOT_FOUND,\r\n      error: defaultError,\r\n    };\r\n  }\r\n\r\n  if (error instanceof ConflictError) {\r\n    return {\r\n      statusCode: StatusCodes.CONFLICT,\r\n      error: defaultError,\r\n    };\r\n  }\r\n\r\n  return {\r\n    statusCode: StatusCodes.INTERNAL_SERVER_ERROR,\r\n    error: defaultError,\r\n  };\r\n}\r\n","import { makeError } from \"@/utils/error\";\r\nimport { type Context } from \"hono\";\r\n\r\nexport async function errorHandlerMiddleware(err: Error, c: Context) {\r\n  const { error, statusCode } = makeError(err);\r\n  console.error(error.message, error);\r\n  return c.json(error, { status: statusCode } as any);\r\n}\r\n","import { config } from \"dotenv\";\r\nimport { z } from \"zod\";\r\n\r\nconfig();\r\n\r\nexport function isTest() {\r\n  return process.env.NODE_ENV === \"test\";\r\n}\r\n\r\nconst envSchema = z.object({\r\n  APP_PORT: z.coerce.number().default(3000),\r\n  HUGGINGFACE_API_KEY: z.string(),\r\n});\r\n\r\nexport const envConfig = envSchema.parse({\r\n  APP_PORT: process.env.APP_PORT,\r\n  HUGGINGFACE_API_KEY: process.env.HUGGINGFACE_API_KEY,\r\n});\r\n\r\nexport type EnvConfig = z.infer<typeof envSchema>;\r\n"],"mappings":"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","names":["Hono","Hono","routes","Hono","routes_default","routes","routes_default","Hono","routes"]}